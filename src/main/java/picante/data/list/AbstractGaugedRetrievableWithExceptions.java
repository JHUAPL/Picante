package picante.data.list;

import static com.google.common.base.Preconditions.checkElementIndex;

/**
 * A layer of abstraction to manage the {@link IndexOutOfBoundsException} generated by retrieval
 * methods in the {@link GaugedRetrievable} interface.
 * <p>
 * This class will manage the generation of index out of bounds exceptions, blocking access to
 * invoking the {@link AbstractGaugedRetrievableWithExceptions#obtain(int, Object)} or
 * {@link AbstractGaugedRetrievableWithExceptions#obtainGauge(int)} methods if the supplied index
 * lies outside the range allowed by the {@link AbstractGaugedRetrievableWithExceptions#size()}
 * method. It is simply a convenience class, if you do not wish to manage the error handling in your
 * own code.
 * </p>
 * 
 * @param <R> the type of record required by the implementation
 */
public abstract class AbstractGaugedRetrievableWithExceptions<R>
    extends AbstractGaugedRetrievable<R> {

  @Override
  public R get(int index, R buffer) {
    checkElementIndex(index, size(), "Record index");
    return obtain(index, buffer);
  }

  /**
   * Method to actually retrieve the record associated with a particular index. This is used
   * directly in the implementation of {@link AbstractGaugedRetrievableWithExceptions#get(int)} to
   * retrieve the record.
   * 
   * @param index the index of interest
   * @param buffer the mutable buffer to receive the resultant record
   * 
   * @return a reference to buffer for convenience
   */
  protected abstract R obtain(int index, R buffer);

  @Override
  public double getGauge(int index) {
    checkElementIndex(index, size(), "Gauge index");
    return obtainGauge(index);
  }

  /**
   * Method to actually retrieve the gauged value associated with a particular index. This is used
   * directly in the implementation of {@link AbstractGaugedIndexableWithExceptions#getGauge(int)}
   * to actually read the measure value associated with the record.
   * 
   * @param index index of interest
   * 
   * @return the double capturing the associated gauged value
   */
  protected abstract double obtainGauge(int index);

}
